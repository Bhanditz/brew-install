#!/usr/bin/env bash

# Version = ${project.version}

set -e

# Extract java opts
java_opts=()
while [ $# -gt 0 ]
do
  case "$1" in
    -J*)
      java_opts+=("${1:2}")
      shift
      ;;
    *)
      break
      ;;
  esac
done

# Extract classpath opts
while [ $# -gt 0 ]
do
  case "$1" in
    -R*)
      resolve_aliases="${1:2}"
      shift
      ;;
    -C*)
      classpath_aliases="${1:2}"
      shift
      ;;
    -P*)
      classpath_overrides="${1:2}"
      shift
      ;;
    -S)
      show_classpath="$1"
      shift
      ;;
    *)
      break
      ;;
  esac
done

# Find java executable
JAVA_CMD=$(type -p java)
if [[ ! -n "$JAVA_CMD" ]]; then
  if [[ -n "$JAVA_HOME" ]] && [[ -x "$JAVA_HOME/bin/java" ]]; then
    JAVA_CMD="$JAVA_HOME/bin/java"
  else
    >&2 echo "Couldn't find 'java'. Please set JAVA_HOME."
  fi
fi

# Determine config directory
if [[ -n "$CLJ_CONFIG" ]]; then
  config_dir="$CLJ_CONFIG"
elif [[ -n "$XDG_CONFIG_HOME" ]]; then
  config_dir="$XDG_CONFIG_HOME/clojure"
else
  config_dir="$HOME/.clojure"
fi

# Set dir containing the installed files
install_dir=PREFIX

# Include install and config deps.edn in config paths
config_paths=("$install_dir/deps.edn" "$config_dir/deps.edn")

# Determine whether we're in project context or not
if [[ -f deps.edn ]]; then
  config_paths+=("deps.edn")
  cache_dir=.cpcache
elif [[ -n "$CLJ_CACHE" ]]; then
  cache_dir="$CLJ_CACHE"
elif [[ -n "$XDG_CACHE_HOME" ]]; then
  cache_dir="$XDG_CACHE_HOME/clojure"
else
  cache_dir="$config_dir/.cpcache"
fi

# Construct location of cached classpath file
if [[ -n "$resolve_aliases" ]]; then
  libs_root="$cache_dir/$resolve_aliases"
else
  libs_root="$cache_dir/default"
fi
libs_file="$libs_root.libs"

if [[ -n "$classpath_aliases" ]]; then
  cp_file="$libs_root/$classpath_aliases.cp"
elif [[ -n "$classpath_overrides" ]]; then
  cp_file="$libs_root/overrides.cp"
else
  cp_file="$libs_root/default.cp"
fi

# Check for stale classpath file
stale=false
if [ ! -f "$cp_file" ] || [ ! -f "$libs_file" ] || [ "$libs_file" -nt "$cp_file" ]; then
  stale=true
else
  for config_path in "${config_paths[@]}"; do
    if [ "$config_path" -nt "$cp_file" ]; then
      stale=true
      break
    fi
  done
fi

# If stale, run makecp to refresh cached classpath
if "$stale"; then
  tools_cp="$install_dir/libexec/clojure-scripts-${project.version}.jar"
  tools_args=()

  if [[ -n "$resolve_aliases" ]]; then
    tools_args+=("-R$resolve_aliases")
  fi
  if [[ -n "$classpath_aliases" ]]; then
    tools_args+=("-C$classpath_aliases")
  fi
  if [[ -n "$classpath_overrides" ]]; then
    tools_args+=("-P$classpath_overrides")
  fi

  config_str=$(printf ",%s" "${config_paths[@]}")
  config_str=${config_str:1}
  "$JAVA_CMD" -Xmx256m -classpath "$tools_cp" clojure.main -m clojure.tools.deps.alpha.makecp "--config-paths=$config_str" "--cache-path=$cache_dir" "${tools_args[@]}"
fi

cp=$(cat "$cp_file")

if [[ -n "$show_classpath" ]]; then
  echo "$cp"
else
  "$JAVA_CMD" "${java_opts[@]}" -classpath "$cp" clojure.main "$@"
fi
